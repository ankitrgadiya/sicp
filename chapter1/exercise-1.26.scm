; Exercise 1.26
; Louis Reasoner is having great difficulty doing Exercise 1.24. His fast-prime?
; test seems to run more slowly than his prime? test. Louis calls his friend
; Eva Lu Ator over to help. When they examine Louis's code, they find that he has
; rewritten the expmod procedure to use an explicit multiplication, rathen than
; calling square:

(define (expmod base exp m)
        (cond ((= exp 0) 1)
              ((even? exp)
               (remainder (* (expmod base (/ exp 2) m)
                             (expmod base (/ exp 2) m))
                          m))
              (else
               (remainder (* base
                             (expmod base (- exp 1) m))
                          m))))

(define (timed-prime-test n)
        (newline)
        (display n)
        (start-prime-test n (runtime)))
(define (start-prime-test n start-time)
        (if (fast-prime? n 2)
            (report-prime (- (runtime) start-time))))
(define (report-prime elapsed-time)
        (display " *** ")
        (display elapsed-time))

(define (even? x) (= (remainder x 2) 0))
(define (fermat-test n)
        (define (try-it a)
                (= (expmod a n n) a))
        (try-it (+ 1 (random (- n 1)))))
(define (fast-prime? n times)
        (cond ((= times 0) true)
              ((fermat-test n) (fast-prime? n (- times 1)))
              (else false)))

(define (search-for-primes a b)
        (define (search-iter a)
                (if (< a b) (timed-prime-test a))
                (if (< a b) (search-iter (+ a 2))))
        (if (= (remainder a 2) 0)
            (search-iter (1+ a))
            (search-iter a)))

; By replacing the square by explicit multiplication, Louis changed the process
; being generated by the procedure from Linear recursive to Tree recursive.
; This is because for applying procedure, interpreter evaluates both operands
; now.  This means every times exponent is even it does the whole calculation 2
; times.  Tree recursive processes have exponential runtime but we're still
; getting the benefit of reducing exponent by half so the over all order of
; growth for the new procecude is Θ(log 2^n) which turns out to be Θ(n).
